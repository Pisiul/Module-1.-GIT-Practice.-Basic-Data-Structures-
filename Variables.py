
#*************************************************** Тема урока ********************************************************
#************************************************* ( ПЕРЕМЕННЫЕ ) ******************************************************

#                                 ------------- Названия переменных -------------

# Переменные предназначены для хранения данных. Объясняя простыми словами, переменная – это кусочек памяти компьютера,
# в который мы можем что-то поместить, чтобы использовать позже.
# Название переменной может содержать буквенные и цифровые символы, а также подчеркивания, но начинаться оно
# обязательно должно именно с буквы или подчеркивания.
# Кроме того, нельзя, чтобы название переменной совпадало с названиями ключевых команд в Python.
# К примеру, мы знаем команду print, так вот мы не можем назвать переменную «print» и т. д.
# Переменным принято давать осмысленные названия. Такие, которые передавали бы суть того, что в них хранится.
# К примеру, у нас есть переменная «name», которая содержит строку «Denis».
# По ней мы сразу пониманием, что эта переменная несет в себе имя.

#                                 ----------- Как работают переменные? ------------
#
# Когда мы присвоим переменной имя и объект, мы можем к ней «обращаться». То есть с помощью переменной,
# мы можем вывести объект, который за ней стоит. Таким образом, если мы введем команду «print(name)»,
# то в ответе увидим нашу строку «Denis»

name = "Denis"
print(name) # - Denis
#-----------------------------------------------------------------------------------------------------------------------
# D:\Программы\ProjectPyton\BasiesStructures\Scripts\python.exe "D:\Программы\ProjectPyton\Module 1.
# GIT Practice. Basic Data Structures\Variables.py"
# Denis
#
# Process finished with exit code 0
#-----------------------------------------------------------------------------------------------------------------------
# Тем не менее переменные называются переменными не просто так. Их значение может меняться в процессе работы.
# К примеру, у нас было одно значение переменной, а теперь мы написали другое. Мы видим, что сначала
# нам вывело строку «Denis», а затем обновленную строку «Urban», поскольку команды выполняются последовательно.

name = "Denis"
print(name)
name = "I am a student at Urban University"
print(name)
#-----------------------------------------------------------------------------------------------------------------------
# D:\Программы\ProjectPyton\BasiesStructures\Scripts\python.exe "D:\Программы\ProjectPyton\Module 1.
# GIT Practice. Basic Data Structures\Variables.py"
# Denis
# I am a student at Urban University
#
# Process finished with exit code 0
#-----------------------------------------------------------------------------------------------------------------------

#                             ------------ Переменные из нескольких слов -------------
#
#
# Как мы помним, переменную следует называть исходя из сути стоящего за ней объекта, но что, если смысл не
# передать одним словом? В таких случаях способ названия переменной подразделяется на два стиля.

# Первым рассмотрим стиль Snake case, в нем для разделения слов используются нижние подчеркивания.
# Например, мы хотим назвать переменную с датой рождения, допустим Март 2022 года,
# если придерживаться стиля Snake case, то это будет выглядеть так
# Такой стиль написания в Python считается лидирующим, то есть программисты обычно придерживаются именно его.

date_of_birth = "22 June 1977"
print(date_of_birth)
#-----------------------------------------------------------------------------------------------------------------------
# D:\Программы\ProjectPyton\BasiesStructures\Scripts\python.exe "D:\Программы\ProjectPyton\Module 1.
# GIT Practice. Basic Data Structures\Variables.py"
# 22 June 1977
#
# Process finished with exit code 0
#-----------------------------------------------------------------------------------------------------------------------
# Однако в случаях названия, например классов, с которыми мы ознакомимся позднее, может использоваться и такой стиль,
# как Camel case. При таком стиле слова разделяются верхним регистром,
# то есть каждое новое слово пишется с заглавной буквы

dateOfBrith = "22 June 1977"
print(dateOfBrith)

#-----------------------------------------------------------------------------------------------------------------------
#D:\Программы\ProjectPyton\BasiesStructures\Scripts\python.exe "D:\Программы\ProjectPyton\Module 1.
# GIT Practice. Basic Data Structures\Variables.py"
# 22 June 1977

# Process finished with exit code 0
#-----------------------------------------------------------------------------------------------------------------------

# Оба этих стиля так или иначе направлены на то, чтобы переменные было легко читать и ориентироваться в их названиях.
# Чтобы в случае, если мы, к примеру будем передавать свой код другому программисту, он по названиям сразу мог понять
# с чем имеет дело и для чего предназначена программа


#                          5 классных вещей, которые вы можете освоить с Python

# https://www.reg.ru/blog/5-klassnyh-veschej-kotorye-vy-mozhete-osvoit-s-python/











